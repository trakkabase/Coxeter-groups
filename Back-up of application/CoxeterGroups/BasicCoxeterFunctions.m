(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* :Title: BasicCoxeterFunctions` *) 
(* :Author: David Sheard *)
(* :Summary: Basic functions to define and manipulate Coxeter systems. *)
(* :Context: CoxeterGroups`BasicCoxeterFunctions` *)
(* :Package version: 1.0 *)
(* :History:  Version 1.0 February 19 2022 *)
(* :Mathematica version: 12.0.0 for Microsoft Windows (64-bit) (April 6, 2019) *)
(* :Discussion: Give more details here.*)


BeginPackage["CoxeterGroups`BasicCoxeterFunctions`"];


Unprotect[
(*Coxeter matrix and Coxeter form*)
BilinearForm, FormSignature,
(*Special Subgroups*)
Generators, DiagramNeighbours,ConnectedComponentUnionQ,IrreducibleFactor,IrreducibleCGQ,SpecialSubgroup,ConvertToSpecialSubgroup,ConvertFromSpecialSubgroup,IrreducibleFactorComplement,IrreducibleFactors,IrreducibleSpecialSubgroups,
(*Types of Coxeter system*)
EuclideanCGQ, SphericalCGQ,HyperbolicCGQ,EvenCGQ,RACGQ,
(*Examples of Coxeter matrices*)
SymmetricEntry,TypeA,TypeB,TypeC,TypeD,E6,E7,E8,F4,G2,H3,H4,I2,TypeAE,TypeAE,TypeAE,TypeAE,EE6,EE7,EE8,FE4,GE2,TriangleCG,FreeCG,RAPolygonG,RABipartiteG,RACGroup];
ClearAll[
(*Coxeter matrix and Coxeter form*)
BilinearForm, FormSignature,
(*Special Subgroups*)
Generators, DiagramNeighbours,ConnectedComponentUnionQ,IrreducibleFactor,IrreducibleCGQ,SpecialSubgroup,ConvertToSpecialSubgroup,ConvertFromSpecialSubgroup,IrreducibleFactorComplement,IrreducibleFactors,IrreducibleSpecialSubgroups,
(*Types of Coxeter system*)
EuclideanCGQ, SphericalCGQ,HyperbolicCGQ,EvenCGQ,RACGQ,
(*Examples of Coxeter matrices*)
SymmetricEntry,GroupName,TypeA,TypeB,TypeC,TypeD,E6,E7,E8,F4,G2,H3,H4,I2,TypeAE,TypeAE,TypeAE,TypeAE,EE6,EE7,EE8,FE4,GE2,TriangleCG,FreeCG,RAPolygonG,RABipartiteG,RACGroup];


(* :Coxeter matrix and Coxeter form: *)
BilinearForm::usage="BilinearForm[M] returns the bilinear form associated to the Coxeter matrix M."; 
FormSignature::usage="FormSugnature[A] returns the signature of the form A in the form of a list {"<>ToString[Subscript["n","+"],FormatType->StandardForm]<>","<>ToString[Subscript["n","0"],FormatType->StandardForm]<>","<>ToString[Subscript["n","-"],FormatType->StandardForm]<>"}.";

(* :SpecialSubgroups: *)
Generators::usage="Generators[M] gives an ordered list of the Coxeter generators of the Coxeter system with matrix M, each generator being of the form \"i\" for some integer i.";
DiagramNeighbours::usage="DiagramNeighbours[M,s] gives an ordered all generators which are adjacent to s in the Coxeter diagram of type M (including s).
DiagramNeighbours[M,{s1,s2,...}] lists all generators which are adjacent to some s in {s1,s2,...} in the Coxeter diagram of type M (including s1, s2,...).";
ConnectedComponentUnionQ::usage="ConnectedComponentUnionQ[M,{s1,s2,...}] returns True if {s1,s2,...} represents the set of vertices of a union of connected components of the Coxeter diagram of type M, and False otherwise.";
IrreducibleFactor::usage="IrreducibleFactor[M,s] returns the list of all vertices in the connected component of the Coxeter diagram of type M.";(*This function privately also takes inputs of the form [M,{s1,s2,...}] but assumes a priori that {s1,s2,...} all lie in the same connected component.*)
IrreducibleCGQ::usage="IrreducibleCGQ[M] returns True if M represents an irreducible Coxeter system, and False otherwise.";
SpecialSubgroup::usage="SpecialSubgroup[M,{s1,s2,...}] returms the pair {N,sList}, where sList=Sort[{s1,s2,...}], and N is the Coxeter matrix of the special subgroup generated by sList.";
IrreducibleFactors::usage="IrreducibleFactors[M] returs a list of the sets of generators in each irreducible special subgroup of W(M).";
IrreducibleSpecialSubgroups::usage="IrreducibleSpecialSubgroups[M] returns a list of all the irreducible special subgroups of W(M), each in the form {N,sList} where N is the Coxeter matrix, and sList is the list of generators for W(N).";

(* :Types of Coxeter system: *)
EuclideanCGQ::usage="EuclideanCGQ[M] returns True if W(M) is a Euclidean Coxeter group, ie it acts discretely by isometries on some Euclidean space, and False otherwise.";
SphericalCGQ::usage="SphericalCGQ[M] returns True if W(M) is finite, and False otherwise.";
HyperbolicCGQ::usage="HyperbolicCGQ[M] returns True if W(M) is a hyperbolic Coxeter group, ie the signature of its bilinear form is (n-1,0,1), and False otherwise.";
EvenCGQ::usage="EvenCGQ[M] returns True if every edge lable in the Coxeter diagram of type M is even, and False otherwise.";
RACGQ::usage="RACGQ[M] returns True if M corresponds to a right-angled Coxeter system, and False otherwise.";

(* :Examples of Coxeter matrices: *)
GroupName::usage="GroupName[M] returns the name of the Coxeter system with matric M as a string. This is used for file naming when storing enumerated elements.";
TypeA::usage="TypeA[n] returns the Coxeter matrix of type "<>ToString[Subscript["A","n"],FormatType->StandardForm]<>".";
TypeB::usage="TypeB[n] returns the Coxeter matrix of type "<>ToString[Subscript["B","n"],FormatType->StandardForm]<>".";
TypeC::usage="TypeC[n] returns the Coxeter matrix of type "<>ToString[Subscript["C","n"],FormatType->StandardForm]<>".";
TypeD::usage="TypeD[n] returns the Coxeter matrix of type "<>ToString[Subscript["D","n"],FormatType->StandardForm]<>".";
E6::usage="E6 returns the Coxeter matrix of type "<>ToString[Subscript["E","6"],FormatType->StandardForm]<>".";
E7::usage="E7 returns the Coxeter matrix of type "<>ToString[Subscript["E","7"],FormatType->StandardForm]<>".";
E8::usage="E8 returns the Coxeter matrix of type "<>ToString[Subscript["E","8"],FormatType->StandardForm]<>".";
F4::usage="F4 returns the Coxeter matrix of type "<>ToString[Subscript["F","4"],FormatType->StandardForm]<>".";
G2::usage="G2 returns the Coxeter matrix of type "<>ToString[Subscript["G","2"],FormatType->StandardForm]<>".";
H3::usage="H3 returns the Coxeter matrix of type "<>ToString[Subscript["H","3"],FormatType->StandardForm]<>".";
H4::usage="H4 returns the Coxeter matrix of type "<>ToString[Subscript["H","4"],FormatType->StandardForm]<>".";
I2::usage="I2[m] returns the Coxeter matrix of type "<>ToString[Subscript["I","2"],FormatType->StandardForm]<>"(m).";
TypeAE::usage="TypeEA[n] returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["A"],"n+1"],FormatType->StandardForm]<>".";
TypeBE::usage="TypeEB[n] returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["B"],"n+1"],FormatType->StandardForm]<>".";
TypeCE::usage="TypeEC[n] returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["C"],"n+1"],FormatType->StandardForm]<>".";
TypeDE::usage="TypeED[n] returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["D"],"n+1"],FormatType->StandardForm]<>".";
EE6::usage="EE6 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["E"],"6"],FormatType->StandardForm]<>".";
EE7::usage="EE7 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["E"],"7"],FormatType->StandardForm]<>".";
EE8::usage="EE8 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["E"],"8"],FormatType->StandardForm]<>".";
FE4::usage="FE4 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["F"],"4"],FormatType->StandardForm]<>".";
GE2::usage="GE2 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["G"],"2"],FormatType->StandardForm]<>".";
TriangleCG::usage="TriangleCG[p,q,r] return the Coxeter matrix of rank 3 with off-diagonal entries p,q,r.";
RACGroup::usage="RACGroup[A] returns the Coxeter matric of the right-angled Coxeter Group associated to the graph with adjacency matrix A.";
FreeCG::usage="FreeCG[n] returns returns the Coxeter matrix of the free Coxter group of rank n.";
RAPolygonG::usage="RAPolygonG[n] returns returns the Coxeter matrix of the Coxter group which acts on the hyperbolic plane with fundamental chamber a right-angled polygon with n sides.";
RABipartiteG::usage="RABipartiteG[m,n] returns returns the Coxeter matrix of the right-angled Coxter group assocoated to the bipartite graph "<>ToString[Subscript["K","m,n"],FormatType->StandardForm]<>".";


(*Coxeter matrix and Coxeter form*)
BilinearForm::argerr="One matrix argument expected."; 
FormSignature::argerr="One matrix argument expected.";
(*SpecialSubgroups*)
Generators::argerr="One matrix argument expected.";
DiagramNeighbours::argerr="Two arguments expected.";
ConnectedComponentUnionQ::argerr="Two arguments expected.";
IrreducibleFactor::argerr="Two arguments expected.";
IrreducibleCGQ::argerr="One matrix argument expected.";
SpecialSubgroup::argerr="Two arguments expected.";
IrreducibleFactors::argerr="One matrix argument expected.";
IrreducibleSpecialSubgroups::argerr="One matrix argument expected.";
(*Types of Coxeter system*)
EuclideanCGQ::argerr="One matrix argument expected.";
SphericalCGQ::argerr="One matrix argument expected.";
HyperbolicCGQ::argerr="One matrix argument expected.";
EvenCGQ::argerr="One matrix argument expected.";
RACGQ::argerr="One matrix argument expected.";
(*Examples of Coxeter matrices*)
GroupName::argerr="One matrix argument expected.";
TypeA::argerr="One number expected.";
TypeB::argerr="One number expected.";
TypeC::argerr="One number expected.";
TypeD::argerr="One number expected.";
I2::argerr="One number expected.";
TypeAE::argerr="One number expected.";
TypeAE::argerr="One number expected.";
TypeAE::argerr="One number expected.";
TypeAE::argerr="One number expected.";
TriangleCG::argerr="Three numbers expected.";
FreeCG::argerr="One number expected.";
RAPolygonG::argerr="One number expected.";
RABipartiteG::argerr="Two numbers expected.";
RACGroup::argerr="One matrix argument expected.";
RACGroup::argtype="Argument must be a symmetric matrix of 1's and 0's.";


Begin["`Private`"];


BilinearForm[args___]:=(Message[BilinearForm::argerr];$Failed)
FormSignature[args___]:=(Message[FormSignature::argerr];$Failed)


BilinearForm[M_]:=Table[Table[-Cos[Pi/M[[i]][[j]]],{j,Length[M]}],{i,Length[M]}] (*gives the canonical bilinear form associated to Coxeter matrix M*)


FormSignature[A_]:={Length[Select[Chop[Eigenvalues[A]],#>0&]],Length[Select[Chop[Eigenvalues[A]],#==0&]],Length[Select[Chop[Eigenvalues[A]],#<0&]]}


Generators[args___]:=(Message[Generators::argerr];$Failed)
DiagramNeighbours[args___]:=(Message[DiagramNeighbours::argerr];$Failed)
ConnectedComponentUnionQ[args___]:=(Message[ConnectedComponentUnionQ::argerr];$Failed)
IrreducibleFactor[args___]:=(Message[IrreducibleFactor::argerr];$Failed)
IrreducibleCGQ[args___]:=(Message[IrreducibleCGQ::argerr];$Failed)
SpecialSubgroup[args___]:=(Message[SpecialSubgroup::argerr];$Failed)
IrreducibleFactors[args___]:=(Message[IrreducibleFactors::argerr];$Failed)
IrreducibleSpecialSubgroups[args___]:=(Message[IrreducibleSpecialSubgroups::argerr];$Failed)


(* ::Input::Initialization:: *)
Generators[M_]:=Table[ToString[i],{i,1,Length[M]}]


(* ::Input::Initialization:: *)
DiagramNeighbours[M_,s_String]:=Sort[Select[Generators[M],Not[M[[ToExpression[s]]][[ToExpression[#]]]==2]&]]
DiagramNeighbours[M_,sList_List]:=Sort[DeleteDuplicates[Flatten[Join[DiagramNeighbours[M,#]&/@sList]]]]


(* ::Input::Initialization:: *)
ConnectedComponentUnionQ[M_,sList_List]:=Sort[sList]==DiagramNeighbours[M,sList]


(* ::Input::Initialization:: *)
IrreducibleFactor[M_,s_String]:=If[ConnectedComponentUnionQ[M,{s}],{s},IrreducibleFactor[M,DiagramNeighbours[M,s]]]
IrreducibleFactor[M_,sList_List]:=If[ConnectedComponentUnionQ[M,sList],sList,IrreducibleFactor[M,DiagramNeighbours[M,sList]]]


(* ::Input::Initialization:: *)
IrreducibleCGQ[M_]:=IrreducibleFactor[M,"1"]==Generators[M]


(* ::Input::Initialization:: *)
SpecialSubgroup[M_,sList_List]:={Join[M[[#]]&/@ToExpression[Sort[sList]]][[All,#]]&/@ToExpression[Sort[sList]],Sort[sList]}


(* ::Input::Initialization:: *)
ConvertToSpecialSubgroup[M_,{N_,sList_List},w_String]:=StringReplace[w,Table[sList[[i]]->ToString[i],{i,1,Length[sList]}]]
ConvertToSpecialSubgroup[M_,{N_,sList_List},wList_List]:=ConvertToSpecialSubgroup[M,{N,sList},#]&/@wList
(*Private function: ConvertToSpecialSubgroup[M,{N,sList},w] rewrites the word w which is an element of the special subgroup W(N) of W(M), which is expressed in the generators of W(M), as a word in the generators {\"1\",...,\"Length[N]\"} which have been identified with the slements of sList.
ConvertToSpecialSubgroup[M,{N,sList},wList] rewrites each element in wList in terms of the new generators of W(N).*)


(* ::Input::Initialization:: *)
ConvertFromSpecialSubgroup[M_,{N_,sList_List},w_String]:=StringReplace[w,Table[ToString[i]-> sList[[i]],{i,1,Length[sList]}]]
ConvertFromSpecialSubgroup[M_,{N_,sList_List},wList_List]:=ConvertFromSpecialSubgroup[M,{N,sList},#]&/@wList
(*Private function: ConvertFromSpecialSubgroup[M,{N,sList},w] applies the inverse operation to ConvertToSpecialSubgroup[M,{N,sList},w].
ConvertFromSpecialSubgroup[M,{N,sList},wList] applies the inverse operation to ConvertToSpecialSubgroup[M,{N,sList},wList].*)


(* ::Input::Initialization:: *)
IrreducibleFactorComplement[M_,s_]:=SpecialSubgroup[M,Complement[Generators[M],IrreducibleFactor[M,s]]]
(*Private function: IrreducibleFactorComplement[M,s] returns the list of all generators not contained in the irreducible factor containing the generator s.*)


(* ::Input::Initialization:: *)
IrreducibleFactors[M_]:=If[IrreducibleCGQ[M],{Generators[M]},
Join[{IrreducibleFactor[M,"1"]},
ConvertFromSpecialSubgroup[M,IrreducibleFactorComplement[M,"1"],#
]&/@IrreducibleFactors[IrreducibleFactorComplement[M,"1"][[1]]]
]
]


(* ::Input::Initialization:: *)
IrreducibleSpecialSubgroups[M_]:=SpecialSubgroup[M,#]&/@IrreducibleFactors[M]


EuclideanCGQ[args___]:=(Message[EuclideanCGQ::argerr];$Failed)
SphericalCGQ[args___]:=(Message[SphericalCGQ::argerr];$Failed)
HyperbolicCGQ[args___]:=(Message[HyperbolicCGQ::argerr];$Failed)
EvenCGQ[args___]:=(Message[EvenCGQ::argerr];$Failed)
RACGQ[args___]:=(Message[RACGQ::argerr];$Failed)


EuclideanCGQ[M_]:=FormSignature[N[BilinearForm[M]]]=={Length[M]-1,1,0}/;IrreducibleCGQ[M]
EuclideanCGQ[M_]:=Fold[And,EuclideanCGQ[#[[1]]]&/@IrreducibleSpecialSubgroups[M]]/;Not[IrreducibleCGQ[M]]


SphericalCGQ[M_]:=FormSignature[N[BilinearForm[M]]]=={Length[M],0,0}


HyperbolicCGQ[M_]:=FormSignature[N[BilinearForm[M]]]=={Length[M]-1,0,1}


EvenCGQ[M_]:=Fold[And,Or[EvenQ[#],MemberQ[{1,Infinity},#]]&/@DeleteDuplicates[Flatten[M]]]


RACGQ[M_]:=Fold[And,MemberQ[{1,2,Infinity},#]&/@DeleteDuplicates[Flatten[M]]]


GroupName[args___]:=(Message[GroupName::argerr];$Failed)
TypeA[args___]:=(Message[TypeA::argerr];$Failed)
TypeB[args___]:=(Message[TypeB::argerr];$Failed)
TypeC[args___]:=(Message[TypeC::argerr];$Failed)
TypeD[args___]:=(Message[TypeD::argerr];$Failed)
I2[args___]:=(Message[I2::argerr];$Failed)
TypeAE[args___]:=(Message[TypeAE::argerr];$Failed)
TypeAE[args___]:=(Message[TypeBE::argerr];$Failed)
TypeAE[args___]:=(Message[TypeCE::argerr];$Failed)
TypeAE[args___]:=(Message[TypeDE::argerr];$Failed)
TriangleCG[args___]:=(Message[TriangleCG::argerr];$Failed)
FreeCG[args___]:=(Message[FreeCG::argerr];$Failed)
RAPolygonG[args___]:=(Message[RAPolygonG::argerr];$Failed)
RABipartiteG[args___]:=(Message[RABipartiteG::argerr];$Failed)
RACGroup[args___]:=(Message[RACGroup::argerr];$Failed)
RACGroup[arg_]:=(Message[RACGroup::argtype];$Failed)


SymmetricEntry[i_,j_]:=If[i==j,1,If[Abs[i-j]==1,3,2]]


TypeA[n_]:=Table[SymmetricEntry[i,j],{i,1,n},{j,1,n}]
GroupName[M_]:="A_"<>ToString[Length[M]]/;M==TypeA[Length[M]]


TypeB[n_]:=Table[If[Or[i==n&&j==n-1,i==n-1&&j==n],4,SymmetricEntry[i,j]],{i,1,n},{j,1,n}]
GroupName[M_]:="B_"<>ToString[Length[M]]/;M==TypeB[Length[M]]


TypeC[n_]:=TypeB[n]


TypeD[n_]:=Table[If[Or[i==n&&j==n-2,i==n-2&&j==n],3,If[Or[i==n&&j==n-1,i==n-1&&j==n],2,SymmetricEntry[i,j]]],{i,1,n},{j,1,n}]
GroupName[M_]:="D_"<>ToString[Length[M]]/;M==TypeD[Length[M]]


E6={{1,3,2,2,2,2},{3,1,3,2,2,2},{2,3,1,3,2,3},{2,2,3,1,3,2},{2,2,2,3,1,2},{2,2,3,2,2,1}};
GroupName[E6]="E_6";


E7={{1,3,2,2,2,2,2},{3,1,3,2,2,2,2},{2,3,1,3,2,2,3},{2,2,3,1,3,2,2},{2,2,2,3,1,3,2},{2,2,2,2,3,1,2},{2,2,3,2,2,2,1}};
GroupName[E7]="E_7";


E8={{1,3,2,2,2,2,2,2},{3,1,3,2,2,2,2,2},{2,3,1,3,2,2,2,3},{2,2,3,1,3,2,2,2},{2,2,2,3,1,3,2,2},{2,2,2,2,3,1,3,2},{2,2,2,2,2,3,1,2},{2,2,3,2,2,2,2,1}};
GroupName[E8]="E_8";


F4={{1,3,2,2},{3,1,4,2},{2,4,1,3},{2,2,3,1}};


G2={{1,6},{6,1}};
GroupName[F4]="F_4";


H3={{1,3,2},{3,1,5},{2,5,1}};
GroupName[H3]="H_3";


H4={{1,3,2,2},{3,1,3,2},{2,3,1,5},{2,2,5,1}};
GroupName[H4]="H_4";


I2[m_]:={{1,m},{m,1}}
GroupName[M_]:="I_2("<>ToString[M[[1]][[2]]]<>")"/;Length[M]==2&&Not[MemberQ[{I2[3],I2[4],I2[6]},M]]


TypeAE[1]={{1,Infinity},{Infinity,1}};
TypeAE[n_]:=TypeA[n+1]+Table[Table[If[Or[And[i==1,j==n+1],And[i==n+1,j==1]],1,0],{i,1,n+1}],{j,1,n+1}]/;n>1
GroupName[M_]:="AE_"<>ToString[Length[M]-1]/;M==TypeAE[Length[M]-1]


TypeBE[2]={{1,4,2},{4,1,4},{2,4,1}};
GroupName[TypeBE[2]]="BE_2";


TypeBE[n_]:=Table[If[And[i<n+1,j<n+1],TypeB[n][[i]][[j]],If[And[i==n+1,j==n+1],1,If[Or[i==2,j==2],3,2]]],{i,1,n+1},{j,1,n+1}]/;n>2
GroupName[M_]:="BE_"<>ToString[Length[M]-1]/;M==TypeBE[Length[M]-1]


TypeCE[n_]:=TypeB[n+1]+Table[If[Or[And[i==1,j==2],And[i==2,j==1]],1,0],{i,1,n+1},{j,1,n+1}]/;n>2
GroupName[M_]:="CE_"<>ToString[Length[M]-1]/;M==TypeCE[Length[M]-1]


TypeDE[n_]:=TypeD[n+1]+Table[If[Or[And[i==1,j==2],And[i==2,j==1]],-1,If[Or[And[i==1,j==3],And[i==3,j==1]],1,0]],{i,1,n+1},{j,1,n+1}]/;n>3
GroupName[M_]:="DE_"<>ToString[Length[M]-1]/;M==TypeDE[Length[M]-1]


EE6=Table[If[And[i<7,j<7],E6[[i]][[j]],If[Or[And[i==7,j==7]],1,If[Or[i==6,j==6],3,2]]],{i,1,7},{j,1,7}];
GroupName[EE6]="EE_6";


EE7={{1,3,2,2,2,2,2,2},{3,1,3,2,2,2,2,2},{2,3,1,3,2,2,2,2},{2,2,3,1,3,2,2,3},{2,2,2,3,1,3,2,2},{2,2,2,2,3,1,3,2},{2,2,2,2,2,3,1,2},{2,2,2,3,2,2,2,1}};
GroupName[EE7]="EE_7";


EE8={{1,3,2,2,2,2,2,2,2},{3,1,3,2,2,2,2,2,2},{2,3,1,3,2,2,2,2,3},{2,2,3,1,3,2,2,2,2},{2,2,2,3,1,3,2,2,2},{2,2,2,2,3,1,3,2,2},{2,2,2,2,2,3,1,3,2},{2,2,2,2,2,2,3,1,2},{2,2,3,2,2,2,2,2,1}};
GroupName[EE8]="EE_8";


FE4={{1,3,2,2,2},{3,1,3,2,2},{2,3,1,4,2},{2,2,4,1,3},{2,2,2,3,1}};
GroupName[FE4]="FE_4";


GE2={{1,3,2},{3,1,6},{2,6,1}};
GroupName[GE2]="GE_2";


TriangleCG[p_,q_,r_]:={{1,p,r},{p,1,q},{r,q,1}};
GroupName[M_]:="triangle("<>ToString[M[[1]][[2]]]<>","<>ToString[M[[1]][[3]]]<>","<>ToString[M[[2]][[3]]]<>")"/;Length[M]==3&&HyperbolicCGQ[M]


FreeCG[n_]:=Table[Table[
If[i==j,1,Infinity],
{i,1,n}],
{j,1,n}]
GroupName[M_]:="free_"<>ToString[Length[M]]/;M==FreeCG[Length[M]]&&Length[M]>1


RAPolygonG[n_]:=Table[
Permute[
Join[{1,2},Table[Infinity,{i,1,n-3}],{2}],
PermutationPower[Cycles[{Table[k,{k,1,n}]}],j-1]],
{j,1,n}]/;n>=4
GroupName[M_]:="RAPolygonG_"<>ToString[Length[M]]/;M==RAPolygonG[Length[M]]


RABipartiteG[m_,n_]:=Table[Table[
If[i==j,1,If[(i<=n&&j<=n)||(i>n&&j>n),Infinity,2]],
{i,1,n+m}],
{j,1,n+m}]
GroupName[M_]:=Module[{m,n},
n=Length[Select[M[[1]],#==2&]];
m=Length[M]-n;
"bipart_("<>ToString[n]<>","<>ToString[m]<>")"/;M==RABipartiteG[n,m]&&Length[M]>3
]


(* ::Input::Initialization:: *)
RACGroup[A_]:=Table[Table[If[i==j,1,If[A[[i]][[j]]==1,2,Infinity]],{i,1,Length[A]}],{j,1,Length[A]}]/;MatrixQ[A]&&SubsetQ[{0,1},Flatten[A]]&&SymmetricMatrixQ[A]


End[];


Protect[(*Coxeter matrix and Coxeter form*)
BilinearForm, FormSignature,
(*Special Subgroups*)
Generators, DiagramNeighbours,ConnectedComponentUnionQ,IrreducibleFactor,IrreducibleCGQ,SpecialSubgroup,ConvertToSpecialSubgroup,ConvertFromSpecialSubgroup,IrreducibleFactorComplement,IrreducibleFactors,IrreducibleSpecialSubgroups,
(*Types of Coxeter system*)
EuclideanCGQ, SphericalCGQ,HyperbolicCGQ,EvenCGQ,RACGQ,
(*Examples of Coxeter matrices*)
SymmetricEntry,TypeA,TypeB,TypeC,TypeD,E6,E7,E8,F4,G2,H3,H4,I2,TypeAE,TypeAE,TypeAE,TypeAE,EE6,EE7,EE8,FE4,GE2,TriangleCG,FreeCG,RAPolygonG,RABipartiteG,RACGroup];


EndPackage[];
