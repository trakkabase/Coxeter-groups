(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* :Title: BasicCoxeterFunctions` *) 
(* :Author: David Sheard *)
(* :Summary: Basic functions to define and manipulate Coxeter systems. *)
(* :Context: CoxeterGroups`BasicCoxeterFunctions` *)
(* :Package version: 1.0 *)
(* :History:  Version 1.0 February 19 2022 *)
(* :Mathematica version: 12.0.0 for Microsoft Windows (64-bit) (April 6, 2019) *)
(* :Discussion: Give more details here.*)


BeginPackage["CoxeterGroups`BasicCoxeterFunctions`"];


Unprotect[
(*Coxeter matrix and Coxeter form*)
ValidCoxeterMatrixQ,BilinearForm, FormSignature,
(*Diagrams*)
CoxeterAdjacencyMatrix,CoxeterDiagram,PresentationAdjacencyMatrix,PresentationDiagram,
(*Generators and word manipulations*)
Generators,GeneratorQ,GeneratorIndex,GeneratorSort,CoxeterWordRewrite,DisplayGenerator,DisplayWord,WordLength,WordInverse,WordTake,WordDrop,WordSymbols,WordPalindromeQ,CentralGenerator,ConjugatingElement,
(*Special Subgroups*)
IrreducibleFactor,IrreducibleCGQ,SpecialSubgroup,ConvertToSpecialSubgroup,ConvertFromSpecialSubgroup,IrreducibleFactors,IrreducibleSpecialSubgroups,SpecialSubgroups,SphericalSubgroups,
(*Types of Coxeter system*)
EuclideanCGQ, SphericalCGQ,HyperbolicCGQ,EvenCGQ,RACGQ,
(*Coxeter system data*)
GroupSize,MaxLength,CoxeterNumber,DavisComplexDimension,
(*Group elements*)
Braid,CoxeterElement,LongestElement,
(*Examples of Coxeter matrices*)
TypeA,TypeB,TypeC,TypeD,E6,E7,E8,F4,G2,H3,H4,I2,TypeAE,TypeAE,TypeAE,TypeAE,EE6,EE7,EE8,FE4,GE2,TriangleCG,FreeCG,RAPolygonG,RABipartiteG,RACGroup
];
ClearAll[
(*Coxeter matrix and Coxeter form*)
ValidCoxeterMatrixQ,BilinearForm, FormSignature,
(*Diagrams*)
CoxeterAdjacencyMatrix,CoxeterDiagram,PresentationAdjacencyMatrix,PresentationDiagram,
(*Generators and word manipulations*)
Generators,GeneratorQ,GeneratorIndex,GeneratorSort,CoxeterWordRewrite,DisplayGenerator,DisplayWord,WordLength,WordInverse,WordTake,WordDrop,WordSymbols,WordPalindromeQ,CentralGenerator,ConjugatingElement,
(*Special Subgroups*)
IrreducibleFactor,IrreducibleCGQ,SpecialSubgroup,ConvertToSpecialSubgroup,ConvertFromSpecialSubgroup,IrreducibleFactors,IrreducibleSpecialSubgroups,SpecialSubgroups,SphericalSubgroups,
(*Types of Coxeter system*)
EuclideanCGQ, SphericalCGQ,HyperbolicCGQ,EvenCGQ,RACGQ,
(*Coxeter system data*)
GroupSize,MaxLength,CoxeterNumber,DavisComplexDimension,
(*Group elements*)
Braid,CoxeterElement,LongestElement,
(*Examples of Coxeter matrices*)
TypeA,TypeB,TypeC,TypeD,E6,E7,E8,F4,G2,H3,H4,I2,TypeAE,TypeAE,TypeAE,TypeAE,EE6,EE7,EE8,FE4,GE2,TriangleCG,FreeCG,RAPolygonG,RABipartiteG,RACGroup
];


ValidCoxeterMatrixQ::usage="ValidCoxeterMatrixQ[M] returns True if M is a Coxeter matrix, and False otherwise.";
BilinearForm::usage="BilinearForm[M] returns the bilinear form associated to the Coxeter matrix M."; 
FormSignature::usage="FormSugnature[A] returns the signature of the form A in the form of a list {"<>ToString[Subscript["n","+"],FormatType->StandardForm]<>","<>ToString[Subscript["n","0"],FormatType->StandardForm]<>","<>ToString[Subscript["n","-"],FormatType->StandardForm]<>"}.";


CoxeterAdjacencyMatrix::usage="CoxeterAdjacencyMatrix[M] gives the adjacency matrix for the Coxeter-Dynkin diagram for M.";
(*Privately this function also takes in an entry of M and outputs 1 or 0*)
CoxeterDiagram::usage="CoxeterDiagram[M] gives the Coxeter-Dynkin diagram of type M.";
PresentationAdjacencyMatrix::usage="PresentationAdjacencyMatrix[M] gives the adjacency matrix for the presentation diagram for M.";
(*Privately this function also takes in an entry of M and outputs 1 or 0*)
PresentationDiagram::usage="PresentationDiagram[M] gives the presnetation diagram of type M.";


Generators::usage="Generators[M] gives an ordered list of the Coxeter generators of the Coxeter system with matrix M, each generator being of the form \"si\" for some integer i.";
GeneratorQ::usage="GeneratorQ[\"word\"] returns True if \"word\" is a single s-symble, eg \"s123\", and False otherwise.";
GeneratorIndex::usage="GeneratorIndex[s] returns the integer index of the generators s.
GeneratorIndex[sList] returns a list of the integer indices of the generators in sList.";
GeneratorSort::usage="GeneratorSort[sList] sorts the list of generator sList by their indices."
CoxeterWordRewrite::usage="CoxeterWordRewrite[w, rules] rewrites the word w using the rules.";
DisplayGenerator::usage="DisplayGenerator[s] outputs the generator s in a human-friendly form using subscripts.";
DisplayWord::usage="DisplayWord[w] outputs the word w in a human-friendly form using subscripts.";
WordLength::usage="WordLength[w] gives the number of generators appearing in the word w.";
WordInverse::usage="WordInverse[w] gives the word resulting from reversing the order of the generators in w.";
WordTake::usage="WordTake[\"word\", n] returns the first n s-symbols from \"word\".
WordTake[\"word\", -n] returns the last n s-symbols from \"word\".
WordTake[\"word\", {n}] returns the n-th s-symbol from \"word\".
WordTake[\"word\", {m, n}] returns the m-th through n-th s-symbols from \"word\".";
WordDrop::usage="WordDrop[\"word\", n] returns \"word\" with the first n s-symbols removed.
WordDrop[\"word\", -n] returns \"word\" with the last n s-symbols removed.
WordDrop[\"word\", {n}] returns \"word\" with the n-th s-symbol removed.
WordDrop[\"word\", {m, n}] returns \"word\" with the m-th through n-th s-symbols removed.";".";
WordSymbols::usage="WordSymbols[\"word\"] returns an ordered list of all distinct s-symbols appearing in \"word\".";
WordPalindromeQ::usage="WordPalindromeQ[\"word\"] returns True if WordInverse[\"word\"] is identical to \"word\", and False otherwise.";
CentralGenerator::usage="CentralGenerator[\"word\"] returns the middle s-symbol in \"word\" if it is palindromic and represents a reflection.";
ConjugatingElement::usage="CentralGenerator[\"word\"] returns the subword of \"word\" such that \"word\" is the conjugate of some generator by that subword.";


IrreducibleFactor::usage="IrreducibleFactor[M,s] returns the list of all vertices in the connected component of the Coxeter diagram of type M.";(*This function privately also takes inputs of the form [M,{s1,s2,...}] but assumes a priori that {s1,s2,...} all lie in the same connected component.*)
IrreducibleCGQ::usage="IrreducibleCGQ[M] returns True if M represents an irreducible Coxeter system, and False otherwise.";
SpecialSubgroup::usage="SpecialSubgroup[M,{s1,s2,...}] returms the pair {N,sList}, where sList=Sort[{s1,s2,...}], and N is the Coxeter matrix of the special subgroup generated by sList.";
ConvertToSpecialSubgroup::usage="ConvertToSpecialSubgroup[M,{N,sList},w] rewrites the word w which is an element of the special subgroup W(N) of W(M), which is expressed in the generators of W(M), as a word in the generators {\"s1\",...,\"sLength[N]\"} which have been identified with the elements of sList.
ConvertToSpecialSubgroup[M,{N,sList},wList] rewrites each element in wList in terms of the new generators of W(N).";
ConvertFromSpecialSubgroup::usage="ConvertFromSpecialSubgroup[M,{N,sList},w] applies the inverse operation to ConvertToSpecialSubgroup[M,{N,sList},w].
ConvertFromSpecialSubgroup[M,{N,sList},wList] applies the inverse operation to ConvertToSpecialSubgroup[M,{N,sList},wList].";
IrreducibleFactors::usage="IrreducibleFactors[M] returs a list of the sets of generators in each irreducible special subgroup of W(M).";
IrreducibleSpecialSubgroups::usage="IrreducibleSpecialSubgroups[M] returns a list of all the irreducible special subgroups of W(M), each in the form {N,sList} where N is the Coxeter matrix, and sList is the list of generators for W(N).";
SpecialSubgroups::usage="SpecialSubgroups[M] returns a list of all non-trivial special subgroups of the Coxeter system with the Coxeter matrix M.";
SphericalSubgroups::usage="SpericalSubgroups[M] returns a list of all non-trivial finite special subgroups of the Coxeter system with the Coxeter matrix M.";


EuclideanCGQ::usage="EuclideanCGQ[M] returns True if W(M) is a Euclidean Coxeter group, ie it acts discretely by isometries on some Euclidean space, and False otherwise.";
SphericalCGQ::usage="SphericalCGQ[M] returns True if W(M) is finite, and False otherwise.";
HyperbolicCGQ::usage="HyperbolicCGQ[M] returns True if W(M) is a hyperbolic Coxeter group, ie the signature of its bilinear form is (n-1,0,1), and False otherwise.";
EvenCGQ::usage="EvenCGQ[M] returns True if every edge lable in the Coxeter diagram of type M is even, and False otherwise.";
RACGQ::usage="RACGQ[M] returns True if M corresponds to a right-angled Coxeter system, and False otherwise.";


GroupSize::usage="GroupSize[M] returns the cadinality of the Coxeter group whose Coxeter matrix is M";
MaxLength::usage="MaxLength[M] returns the length of the unique longest element in the Coxeter group whose Coxeter matrix is M if M is spherical type, and \[Infinity] otherwise.";
CoxeterNumber::usage="CoxeterNumber[M] returns the order of the Coxeter element of the Coxeter system associated to M. Unless M has spherical type, this is \[Infinity]."
DavisComplexDimension::usage="DavisComplexDimension[M] returns the dimension of the Davis complex associated to the Coxeter system with Coxeter matrix M.";


Braid::usage="Braid[n,i,j] gives the word ijiji... of length n.";
CoxeterElement::usage="CoxeterElement[M] gives a Coxeter elemenet of the Coxeter system with Coxeter matrix M.";
LongestElement::usage="LongestElement[M] gives the unique element of longest length in M (if M is spherical).";


TypeA::usage="TypeA[n] returns the Coxeter matrix of type "<>ToString[Subscript["A","n"],FormatType->StandardForm]<>".";
TypeB::usage="TypeB[n] returns the Coxeter matrix of type "<>ToString[Subscript["B","n"],FormatType->StandardForm]<>".";
TypeC::usage="TypeC[n] returns the Coxeter matrix of type "<>ToString[Subscript["C","n"],FormatType->StandardForm]<>".";
TypeD::usage="TypeD[n] returns the Coxeter matrix of type "<>ToString[Subscript["D","n"],FormatType->StandardForm]<>".";
E6::usage="E6 returns the Coxeter matrix of type "<>ToString[Subscript["E","6"],FormatType->StandardForm]<>".";
E7::usage="E7 returns the Coxeter matrix of type "<>ToString[Subscript["E","7"],FormatType->StandardForm]<>".";
E8::usage="E8 returns the Coxeter matrix of type "<>ToString[Subscript["E","8"],FormatType->StandardForm]<>".";
F4::usage="F4 returns the Coxeter matrix of type "<>ToString[Subscript["F","4"],FormatType->StandardForm]<>".";
G2::usage="G2 returns the Coxeter matrix of type "<>ToString[Subscript["G","2"],FormatType->StandardForm]<>".";
H3::usage="H3 returns the Coxeter matrix of type "<>ToString[Subscript["H","3"],FormatType->StandardForm]<>".";
H4::usage="H4 returns the Coxeter matrix of type "<>ToString[Subscript["H","4"],FormatType->StandardForm]<>".";
I2::usage="I2[m] returns the Coxeter matrix of type "<>ToString[Subscript["I","2"],FormatType->StandardForm]<>"(m).";
TypeAE::usage="TypeEA[n] returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["A"],"n+1"],FormatType->StandardForm]<>".";
TypeBE::usage="TypeEB[n] returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["B"],"n+1"],FormatType->StandardForm]<>".";
TypeCE::usage="TypeEC[n] returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["C"],"n+1"],FormatType->StandardForm]<>".";
TypeDE::usage="TypeED[n] returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["D"],"n+1"],FormatType->StandardForm]<>".";
EE6::usage="EE6 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["E"],"6"],FormatType->StandardForm]<>".";
EE7::usage="EE7 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["E"],"7"],FormatType->StandardForm]<>".";
EE8::usage="EE8 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["E"],"8"],FormatType->StandardForm]<>".";
FE4::usage="FE4 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["F"],"4"],FormatType->StandardForm]<>".";
GE2::usage="GE2 returns the Coxeter matrix of type "<>ToString[Subscript[OverTilde["G"],"2"],FormatType->StandardForm]<>".";
TriangleCG::usage="TriangleCG[p,q,r] return the Coxeter matrix of rank 3 with off-diagonal entries p,q,r.";
RACGroup::usage="RACGroup[A] returns the Coxeter matric of the right-angled Coxeter Group associated to the graph with adjacency matrix A.";
FreeCG::usage="FreeCG[n] returns returns the Coxeter matrix of the free Coxter group of rank n.";
RAPolygonG::usage="RAPolygonG[n] returns returns the Coxeter matrix of the Coxter group which acts on the hyperbolic plane with fundamental chamber a right-angled polygon with n sides.";
RABipartiteG::usage="RABipartiteG[m,n] returns returns the Coxeter matrix of the right-angled Coxter group assocoated to the bipartite graph "<>ToString[Subscript["K","m,n"],FormatType->StandardForm]<>".";


ValidCoxeterMatrixQ::argerr="One matrix argument expected."; 
BilinearForm::argerr="One matrix argument expected."; 
FormSignature::argerr="One matrix argument expected.";


CoxeterAdjacencyMatrix::argerr="One matrix argument expected.";
CoxeterDiagram::argerr="One matrix argument expected.";
PresentationAdjacencyMatrix::argerr="One matrix argument expected.";
PresentationDiagram::argerr="One matrix argument expected.";


Generators::argerr="One matrix argument expected.";
GeneratorQ::argerr="One string argument expected.";
GeneratorIndex::argerr="One argument expected.";
GeneratorSort::argerr="One list argument expected.";
CoxeterWordRewrite::argerr="Two arguments expected.";
DisplayGenerator::argerr="One argument expected.";
DisplayWord::argerr="One argument expected.";
WordLength::argerr="One string argument expected.";
WordInverse::argerr="One string argument expected."
WordTake::argerr="Two arguments expected.";
WordDrop::argerr="Two arguments expected.";
WordSymbols::argerr="One string argument expected."
WordPalindromeQ::argerr="One string argument expected.";
CentralGenerator::argerr="One string argument expected.";
CentralGenerator::notpalindromic="The input must be a palindromic word.";
ConjugatingElement::argerr="One string argument expected.";
ConjugatingElement::notpalindromic="The input must be a palindromic word.";


IrreducibleFactor::argerr="Two arguments expected.";
IrreducibleCGQ::argerr="One matrix argument expected.";
SpecialSubgroup::argerr="Two arguments expected.";
ConvertToSpecialSubgroup::argerr="Three arguments expected.";
ConvertFromSpecialSubgroup::argerr="Three arguments expected.";
IrreducibleFactors::argerr="One matrix argument expected.";
IrreducibleSpecialSubgroups::argerr="One matrix argument expected.";
SpecialSubgroups::argerr="One matrix argument expected.";
SphericalSubgroups::argerr="One matrix argument expected.";


EuclideanCGQ::argerr="One matrix argument expected.";
SphericalCGQ::argerr="One matrix argument expected.";
HyperbolicCGQ::argerr="One matrix argument expected.";
EvenCGQ::argerr="One matrix argument expected.";
RACGQ::argerr="One matrix argument expected.";


GroupSize::argerr="One matrix argument expected.";
MaxLength::argerr="One matrix argument expected.";
CoxeterNumber::argerr="One matrix argument expected.";
DavisComplexDimension::argerr="One matrix argument expected.";


Braid::argerr="Three arguments expected.";
CoxeterElement::argerr="One matrix argument expected.";
LongestElement::argerr="One matrix argument expected.";LongestElement::notdefined="The longest element is only well defined if the Coxeter system is spherical.";


TypeA::argerr="One number expected.";
TypeB::argerr="One number expected.";
TypeC::argerr="One number expected.";
TypeD::argerr="One number expected.";
I2::argerr="One number expected.";
TypeAE::argerr="One number expected.";
TypeAE::argerr="One number expected.";
TypeAE::argerr="One number expected.";
TypeAE::argerr="One number expected.";
TriangleCG::argerr="Three numbers expected.";
FreeCG::argerr="One number expected.";
RAPolygonG::argerr="One number expected.";
RABipartiteG::argerr="Two numbers expected.";
RACGroup::argerr="One matrix argument expected.";
RACGroup::argtype="Argument must be a symmetric matrix of 1's and 0's.";


Begin["`Private`"];


ValidCoxeterMatrixQ[args___]:=(Message[ValidCoxeterMatrixQ::argerr];$Failed)
BilinearForm[args___]:=(Message[BilinearForm::argerr];$Failed)
FormSignature[args___]:=(Message[FormSignature::argerr];$Failed)


ValidCoxeterMatrixQ[M_]:=SymmetricMatrixQ[M]&&Fold[And,M[[#]][[#]]==1&/@Range[Length[M]]]&&Fold[And,(Head[#]==Integer||Head[#]==DirectedInfinity)&&#>0&/@DeleteDuplicates[Flatten[M]]]


BilinearForm[M_]:=Table[Table[-Cos[Pi/M[[i]][[j]]],{j,Length[M]}],{i,Length[M]}] (*gives the canonical bilinear form associated to Coxeter matrix M*)


FormSignature[A_]:={Length[Select[Chop[Eigenvalues[A]],#>0&]],Length[Select[Chop[Eigenvalues[A]],#==0&]],Length[Select[Chop[Eigenvalues[A]],#<0&]]}


CoxeterAdjacencyMatrix[args___]:=(Message[CoxeterAdjacencyMatrix::argerr];$Failed)
CoxeterDiagram[args___]:=(Message[CoxeterDiagram::argerr];$Failed)
PresentationAdjacencyMatrix[args___]:=(Message[PresentationAdjacencyMatrix::argerr];$Failed)
PresentationDiagram[args___]:=(Message[PresentationDiagram::argerr];$Failed)


CoxeterAdjacencyMatrix[m_]:=If[m==1||m==2,0,1]
CoxeterAdjacencyMatrix[M_List]:=CoxeterAdjacencyMatrix[#]&/@ M


CoxeterEdges[M_]:=Select[Subsets[GeneratorIndex[#]&/@Generators[M],{2}],#[[1]]<#[[2]]&& CoxeterAdjacencyMatrix[M[[#[[1]]]][[#[[2]]]]]==1&]


CoxeterEdgeLabels[M_]:=#[[1]]\[UndirectedEdge] #[[2]]-> M[[#[[1]]]][[#[[2]]]]&/@CoxeterEdges[M]


CoxeterDiagram[M_]:=AdjacencyGraph[CoxeterAdjacencyMatrix[M],VertexLabels-> Table[i->DisplayGenerator[Generators[M][[i]]],{i,1,Length[M]}],EdgeLabels-> CoxeterEdgeLabels[M]]


PresentationAdjacencyMatrix[m_]:=If[m==1||m==Infinity,0,1]
PresentationAdjacencyMatrix[M_List]:=PresentationAdjacencyMatrix[#]&/@ M


PresentationEdges[M_]:=Select[Subsets[GeneratorIndex[#]&/@Generators[M],{2}],#[[1]]<#[[2]]&& PresentationAdjacencyMatrix[M[[#[[1]]]][[#[[2]]]]]==1&]


PresentationEdgeLabels[M_]:=#[[1]]\[UndirectedEdge] #[[2]]-> M[[#[[1]]]][[#[[2]]]]&/@PresentationEdges[M]


PresentationDiagram[M_]:=AdjacencyGraph[PresentationAdjacencyMatrix[M],VertexLabels->Table[i->DisplayGenerator[Generators[M][[i]]],{i,1,Length[M]}],EdgeLabels-> PresentationEdgeLabels[M]]


Generators[args___]:=(Message[Generators::argerr];$Failed)
GeneratorQ[args___]:=(Message[GeneratorQ::argerr];$Failed)
GeneratorIndex[args___]:=(Message[GeneratorIndex::argerr];$Failed)
GeneratorSort[args___]:=(Message[GeneratorSort::argerr];$Failed)
CoxeterWordRewrite[args___]:=(Message[CoxeterWordRewrite::argerr];$Failed)
DisplayGenerator[args___]:=(Message[DisplayGenerator::argerr];$Failed)
DisplayWord[args___]:=(Message[DisplayWord::argerr];$Failed)
WordLength[args___]:=(Message[WordLength::argerr];$Failed)
WordInverse[args___]:=(Message[WordInverse::argerr];$Failed)
WordTake[args___]:=(Message[WordTake::argerr];$Failed)
WordDrop[args___]:=(Message[WordDrop::argerr];$Failed)
WordSymbols[args___]:=(Message[WordSymbols::argerr];$Failed)
WordPalindromeQ[args___]:=(Message[WordPalindromeQ::argerr];$Failed)
CentralGenerator[args___]:=(Message[CentralGenerator::argerr];$Failed)
ConjugatingElement[args___]:=(Message[ConjugatingElement::argerr];$Failed)


(* ::Input::Initialization:: *)
Generators[M_]:="s"<>ToString[#]&/@Range[Length[M]]


GeneratorQ[w_]:=StringMatchQ[w,"s"~~x__/;!StringContainsQ[x,"s"]]


GeneratorIndex[s_String]:=ToExpression[StringDrop[s,1]]
GeneratorIndex[sList_List]:=GeneratorIndex[#]&/@sList


GeneratorSort[sList_]:=Sort[sList,GeneratorIndex[#1]<GeneratorIndex[#2]&]


CoxeterWordRewrite[w_,rules_]:=Module[{newRules,newWord,replacement},
newRules=KeyValueMap[#1<>"s"->#2<>"s"&,Association[rules]];
newWord=StringDrop[StringReplace[w,"s"->"ss"]<>"s",1];
replacement=StringReplace[newWord,newRules];
StringDrop[StringReplace[replacement,"ss"->"s"],-1]
]


DisplayGenerator[s_]:=ToString[Subscript["s",StringDrop[s,1]],StandardForm]


DisplayWord[w_]:=Fold[StringJoin,DisplayGenerator["s"<>#]&/@StringSplit[StringDrop[w,1],"s"]]


WordLength[w_]:=StringCount[w,"s"]


WordToList[w_]:="s"<>#&/@StringSplit[StringDrop[w,1],"s"]


WordTake[w_,0]:=""
WordTake[w_,k_]:=Fold[StringJoin,Take[WordToList[w],k]]/;!k==0
WordTake[w_,{k_}]:=WordToList[w][[k]]
WordTake[w_,{m_,n_}]:=Fold[StringJoin,Take[WordToList[w],{m,n}]]


WordDrop[w_,k_]:=Fold[StringJoin,Drop[WordToList[w],k]]


WordInverse[w_]:=Fold[StringJoin,Reverse[WordToList[w]]]


WordSymbols[w_]:=GeneratorSort[DeleteDuplicates[WordToList[w]]]


WordPalindromeQ[w_]:=PalindromeQ[WordToList[w]]


(* ::Input::Initialization:: *)
CentralGenerator[w_String]:=WordTake[w,{(WordLength[w]+1)/2}]/;WordPalindromeQ[w]&&OddQ[WordLength[w]]
CentralGenerator[w_]:=(Message[CentralGenerator::notpalindromic];$Failed)/;!WordPalindromeQ[w]||!OddQ[WordLength[w]]


(* ::Input::Initialization:: *)
ConjugatingElement[w_String]:=WordTake[w,(WordLength[w]-1)/2]/;WordPalindromeQ[w]&&OddQ[WordLength[w]]
ConjugatingElement[w_]:=(Message[ConjugatingElement::notpalindromic];$Failed)/;!WordPalindromeQ[w]||!OddQ[WordLength[w]]


IrreducibleFactor[args___]:=(Message[IrreducibleFactor::argerr];$Failed)
IrreducibleCGQ[args___]:=(Message[IrreducibleCGQ::argerr];$Failed)
SpecialSubgroup[args___]:=(Message[SpecialSubgroup::argerr];$Failed)
ConvertToSpecialSubgroup[args___]:=(Message[ConvertToSpecialSubgroup::argerr];$Failed)
ConvertFromSpecialSubgroup[args___]:=(Message[ConvertFromSpecialSubgroup::argerr];$Failed)
IrreducibleFactors[args___]:=(Message[IrreducibleFactors::argerr];$Failed)
IrreducibleSpecialSubgroups[args___]:=(Message[IrreducibleSpecialSubgroups::argerr];$Failed)
SpecialSubgroups[args___]:=(Message[SpecialSubgroups::argerr];$Failed)
SphericalSubgroups[args___]:=(Message[SphericalSubgroups::argerr];$Failed)


(* ::Input::Initialization:: *)
DiagramNeighbours[M_,s_String]:=Sort[Select[Generators[M],Not[M[[GeneratorIndex[s]]][[GeneratorIndex[#]]]==2]&]]
DiagramNeighbours[M_,sList_List]:=Sort[DeleteDuplicates[Flatten[Join[DiagramNeighbours[M,#]&/@sList]]]]


(* ::Input::Initialization:: *)
ConnectedComponentUnionQ[M_,sList_List]:=Sort[sList]==DiagramNeighbours[M,sList]


(* ::Input::Initialization:: *)
IrreducibleFactor[M_,s_String]:=If[ConnectedComponentUnionQ[M,{s}],{s},IrreducibleFactor[M,DiagramNeighbours[M,s]]]
IrreducibleFactor[M_,sList_List]:=If[ConnectedComponentUnionQ[M,sList],sList,IrreducibleFactor[M,DiagramNeighbours[M,sList]]]


(* ::Input::Initialization:: *)
IrreducibleCGQ[M_]:=IrreducibleFactor[M,"s1"]==Generators[M]


(* ::Input::Initialization:: *)
SpecialSubgroup[M_,sList_List]:={Join[M[[#]]&/@GeneratorIndex[GeneratorSort[sList]]][[All,#]]&/@GeneratorIndex[GeneratorSort[sList]],GeneratorSort[sList]}


(* ::Input::Initialization:: *)
ConvertToSpecialSubgroup[M_,{N_,sList_List},w_String]:=CoxeterWordRewrite[w,Table[GeneratorSort[sList][[i]]->"s"<>ToString[i],{i,1,Length[GeneratorSort[sList]]}]]
ConvertToSpecialSubgroup[M_,{N_,sList_List},wList_List]:=ConvertToSpecialSubgroup[M,{N,sList},#]&/@wList


(* ::Input::Initialization:: *)
ConvertFromSpecialSubgroup[M_,{N_,sList_List},w_String]:=
CoxeterWordRewrite[w,Table["s"<>ToString[i]-> sList[[i]],{i,1,Length[sList]}]]
ConvertFromSpecialSubgroup[M_,{N_,sList_List},wList_List]:=ConvertFromSpecialSubgroup[M,{N,sList},#]&/@wList
(*Private function: ConvertFromSpecialSubgroup[M,{N,sList},w] applies the inverse operation to ConvertToSpecialSubgroup[M,{N,sList},w].
ConvertFromSpecialSubgroup[M,{N,sList},wList] applies the inverse operation to ConvertToSpecialSubgroup[M,{N,sList},wList].*)


(* ::Input::Initialization:: *)
IrreducibleFactorComplement[M_,s_]:=SpecialSubgroup[M,Complement[Generators[M],IrreducibleFactor[M,s]]]
(*Private function: IrreducibleFactorComplement[M,s] returns the list of all generators not contained in the irreducible factor containing the generator s.*)


(* ::Input::Initialization:: *)
IrreducibleFactors[M_]:=If[IrreducibleCGQ[M],{Generators[M]},
Join[{IrreducibleFactor[M,"s1"]},
ConvertFromSpecialSubgroup[M,IrreducibleFactorComplement[M,"s1"],#
]&/@IrreducibleFactors[IrreducibleFactorComplement[M,"s1"][[1]]]
]
]


(* ::Input::Initialization:: *)
IrreducibleSpecialSubgroups[M_]:=SpecialSubgroup[M,#]&/@IrreducibleFactors[M]


SpecialSubgroups[M_]:=SpecialSubgroup[M,#]&/@Drop[Subsets[Generators[M]],1]


SphericalSubgroups[M_]:=Select[SpecialSubgroups[M],SphericalCGQ[#[[1]]]&]


EuclideanCGQ[args___]:=(Message[EuclideanCGQ::argerr];$Failed)
SphericalCGQ[args___]:=(Message[SphericalCGQ::argerr];$Failed)
HyperbolicCGQ[args___]:=(Message[HyperbolicCGQ::argerr];$Failed)
EvenCGQ[args___]:=(Message[EvenCGQ::argerr];$Failed)
RACGQ[args___]:=(Message[RACGQ::argerr];$Failed)


EuclideanCGQ[M_]:=FormSignature[N[BilinearForm[M]]]=={Length[M]-1,1,0}/;IrreducibleCGQ[M]
EuclideanCGQ[M_]:=Fold[And,EuclideanCGQ[#[[1]]]&/@IrreducibleSpecialSubgroups[M]]/;!IrreducibleCGQ[M]


SphericalCGQ[M_]:=FormSignature[N[BilinearForm[M]]]=={Length[M],0,0}


HyperbolicCGQ[M_]:=FormSignature[N[BilinearForm[M]]]=={Length[M]-1,0,1}


EvenCGQ[M_]:=Fold[And,Or[EvenQ[#],MemberQ[{1,Infinity},#]]&/@DeleteDuplicates[Flatten[M]]]


RACGQ[M_]:=Fold[And,MemberQ[{1,2,Infinity},#]&/@DeleteDuplicates[Flatten[M]]]


GroupSize[args___]:=(Message[GroupSize::argerr];$Failed)
MaxLength[args___]:=(Message[MaxLength::argerr];$Failed)
CoxeterNumber[args___]:=(Message[CoxeterNumber::argerr];$Failed)
DavisComplexDimension[args___]:=(Message[DavisComplexDimension::argerr];$Failed)


GroupSize[M_]:=51840/;M==E6
GroupSize[M_]:=2903040/;M==E7
GroupSize[M_]:=696729600/;M==E8
GroupSize[M_]:=1152/;M==F4
GroupSize[M_]:=12/;M==G2
GroupSize[M_]:=120/;M==H3
GroupSize[M_]:=14400/;M==H4
GroupSize[M_]:=Module[{n},
n=Length[M];
If[n==2,2M[[1]][[2]],
If[M==TypeA[n],Factorial[n+1],
If[M==TypeB[n],2^n Factorial[n],
If[M==TypeD[n],2^(n-1)Factorial[n],Infinity]]]]
]/;IrreducibleCGQ[M]&&!MemberQ[{E6,E7,E8,F4,G2,H3,H4},M]
GroupSize[M_]:=Fold[Times,GroupSize[#[[1]]]&/@IrreducibleSpecialSubgroups[M]]/;!IrreducibleCGQ[M]


MaxLength[M_]:=36/;M==E6
MaxLength[M_]:=63/;M==E7
MaxLength[M_]:=120/;M==E8
MaxLength[M_]:=24/;M==F4
MaxLength[M_]:=6/;M==G2
MaxLength[M_]:=15/;M==H3
MaxLength[M_]:=60/;M==H4
MaxLength[M_]:=Module[{n},
n=Length[M];
If[n==2,M[[1]][[2]],
If[M==TypeA[n],Binomial[n+1,2],
If[M==TypeB[n],n^2,
If[M==TypeD[n],n^2-n,Infinity]]]]]/;IrreducibleCGQ[M]&&!MemberQ[{E6,E7,E8,F4,G2,H3,H4},M]
MaxLength[M_]:=Total[MaxLength[#[[1]]]&/@IrreducibleSpecialSubgroups[M]]/;!IrreducibleCGQ[M]


CoxeterNumber[M_]:=12/;M==E6
CoxeterNumber[M_]:=18/;M==E7
CoxeterNumber[M_]:=30/;M==E8
CoxeterNumber[M_]:=12/;M==F4
CoxeterNumber[M_]:=6/;M==G2
CoxeterNumber[M_]:=10/;M==H3
CoxeterNumber[M_]:=30/;M==H4
CoxeterNumber[M_]:=Module[{n},
n=Length[M];
If[n==2,M[[1]][[2]],
If[M==TypeA[n],n+1,
If[M==TypeB[n],2n,
If[M==TypeD[n],2n-1,Infinity]]]]]/;IrreducibleCGQ[M]&&!MemberQ[{E6,E7,E8,F4,G2,H3,H4},M]
CoxeterNumber[M_]:=Fold[LCM,CoxeterNumber[#[[1]]]&/@IrreducibleSpecialSubgroups[M]]/;!IrreducibleCGQ[M]


DavisComplexDimension[M_]:=Max[Length[#[[1]]]&/@SphericalSubgroups[M]]


Braid[args___]:=(Message[Braid::argerr];$Failed)
CoxeterElement[args___]:=(Message[CoxeterElement::argerr];$Failed)
LongestElement[args___]:=(Message[LongestElement::argerr];$Failed)


Braid[n_,i_,j_]:=Fold[StringJoin,Take[Flatten[Table[{i,j},{k,n}]],n] ]


(* ::Input::Initialization:: *)
CoxeterElement[M_]:=Fold[StringJoin,Generators[M]]


(* ::Input::Initialization:: *)
LongestElement[M_]:=Fold[StringJoin,Table[CoxeterElement[M],{i,1,CoxeterNumber[M]/2}]]/;EvenQ[CoxeterNumber[M]]&&IrreducibleCGQ[M]
LongestElement[M_]:=Braid[M[[1]][[2]],Generators[M][[1]],Generators[M][[2]]]/;Length[M]==2&&M[[1]][[2]]<Infinity
LongestElement[M_]:=Fold[StringJoin,CoxeterWordRewrite[LongestElement[#[[1]]],Table["s"<>ToString[i]->#[[2]][[i]],{i,1,Length[#[[1]]]}]]&/@IrreducibleSpecialSubgroups[M]]/;!IrreducibleCGQ[M]&&SphericalCGQ[M]
LongestElement[M_]:=(Message[LongestElement::notdefined];$Failed)/;!SphericalCGQ[M]


TypeA[args___]:=(Message[TypeA::argerr];$Failed)
TypeB[args___]:=(Message[TypeB::argerr];$Failed)
TypeC[args___]:=(Message[TypeC::argerr];$Failed)
TypeD[args___]:=(Message[TypeD::argerr];$Failed)
I2[args___]:=(Message[I2::argerr];$Failed)
TypeAE[args___]:=(Message[TypeAE::argerr];$Failed)
TypeAE[args___]:=(Message[TypeBE::argerr];$Failed)
TypeAE[args___]:=(Message[TypeCE::argerr];$Failed)
TypeAE[args___]:=(Message[TypeDE::argerr];$Failed)
TriangleCG[args___]:=(Message[TriangleCG::argerr];$Failed)
FreeCG[args___]:=(Message[FreeCG::argerr];$Failed)
RAPolygonG[args___]:=(Message[RAPolygonG::argerr];$Failed)
RABipartiteG[args___]:=(Message[RABipartiteG::argerr];$Failed)
RACGroup[args___]:=(Message[RACGroup::argerr];$Failed)
RACGroup[arg_]:=(Message[RACGroup::argtype];$Failed)


SymmetricEntry[i_,j_]:=If[i==j,1,If[Abs[i-j]==1,3,2]]


TypeA[n_]:=Table[SymmetricEntry[i,j],{i,1,n},{j,1,n}]


TypeB[n_]:=Table[If[Or[i==n&&j==n-1,i==n-1&&j==n],4,SymmetricEntry[i,j]],{i,1,n},{j,1,n}]


TypeC[n_]:=TypeB[n]


TypeD[n_]:=Table[If[Or[i==n&&j==n-2,i==n-2&&j==n],3,If[Or[i==n&&j==n-1,i==n-1&&j==n],2,SymmetricEntry[i,j]]],{i,1,n},{j,1,n}]


E6={{1,3,2,2,2,2},{3,1,3,2,2,2},{2,3,1,3,2,3},{2,2,3,1,3,2},{2,2,2,3,1,2},{2,2,3,2,2,1}};


E7={{1,3,2,2,2,2,2},{3,1,3,2,2,2,2},{2,3,1,3,2,2,3},{2,2,3,1,3,2,2},{2,2,2,3,1,3,2},{2,2,2,2,3,1,2},{2,2,3,2,2,2,1}};


E8={{1,3,2,2,2,2,2,2},{3,1,3,2,2,2,2,2},{2,3,1,3,2,2,2,3},{2,2,3,1,3,2,2,2},{2,2,2,3,1,3,2,2},{2,2,2,2,3,1,3,2},{2,2,2,2,2,3,1,2},{2,2,3,2,2,2,2,1}};


F4={{1,3,2,2},{3,1,4,2},{2,4,1,3},{2,2,3,1}};


G2={{1,6},{6,1}};


H3={{1,3,2},{3,1,5},{2,5,1}};


H4={{1,3,2,2},{3,1,3,2},{2,3,1,5},{2,2,5,1}};


I2[m_]:={{1,m},{m,1}}


TypeAE[1]={{1,Infinity},{Infinity,1}};
TypeAE[n_]:=TypeA[n+1]+Table[Table[If[Or[And[i==1,j==n+1],And[i==n+1,j==1]],1,0],{i,1,n+1}],{j,1,n+1}]/;n>1


TypeBE[2]={{1,4,2},{4,1,4},{2,4,1}};


TypeBE[n_]:=Table[If[And[i<n+1,j<n+1],TypeB[n][[i]][[j]],If[And[i==n+1,j==n+1],1,If[Or[i==2,j==2],3,2]]],{i,1,n+1},{j,1,n+1}]/;n>2


TypeCE[n_]:=TypeB[n+1]+Table[If[Or[And[i==1,j==2],And[i==2,j==1]],1,0],{i,1,n+1},{j,1,n+1}]/;n>2


TypeDE[n_]:=TypeD[n+1]+Table[If[Or[And[i==1,j==2],And[i==2,j==1]],-1,If[Or[And[i==1,j==3],And[i==3,j==1]],1,0]],{i,1,n+1},{j,1,n+1}]/;n>3


EE6=Table[If[And[i<7,j<7],E6[[i]][[j]],If[Or[And[i==7,j==7]],1,If[Or[i==6,j==6],3,2]]],{i,1,7},{j,1,7}];


EE7={{1,3,2,2,2,2,2,2},{3,1,3,2,2,2,2,2},{2,3,1,3,2,2,2,2},{2,2,3,1,3,2,2,3},{2,2,2,3,1,3,2,2},{2,2,2,2,3,1,3,2},{2,2,2,2,2,3,1,2},{2,2,2,3,2,2,2,1}};


EE8={{1,3,2,2,2,2,2,2,2},{3,1,3,2,2,2,2,2,2},{2,3,1,3,2,2,2,2,3},{2,2,3,1,3,2,2,2,2},{2,2,2,3,1,3,2,2,2},{2,2,2,2,3,1,3,2,2},{2,2,2,2,2,3,1,3,2},{2,2,2,2,2,2,3,1,2},{2,2,3,2,2,2,2,2,1}};


FE4={{1,3,2,2,2},{3,1,3,2,2},{2,3,1,4,2},{2,2,4,1,3},{2,2,2,3,1}};


GE2={{1,3,2},{3,1,6},{2,6,1}};


TriangleCG[p_,q_,r_]:=Module[{min,mid,max},
{min,mid,max}=Sort[{p,q,r}];
{{1,mid,min},{mid,1,max},{min,max,1}}
]


FreeCG[n_]:=Table[Table[
If[i==j,1,Infinity],
{i,1,n}],
{j,1,n}]


RAPolygonG[n_]:=Table[
Permute[
Join[{1,2},Table[Infinity,{i,1,n-3}],{2}],
PermutationPower[Cycles[{Table[k,{k,1,n}]}],j-1]],
{j,1,n}]


RABipartiteG[m_,n_]:=Table[Table[
If[i==j,1,If[(i<=n&&j<=n)||(i>n&&j>n),Infinity,2]],
{i,1,n+m}],
{j,1,n+m}]/;m<=n
RABipartiteG[m_,n_]:=RABipartiteG[n,m]/;m>n


(* ::Input::Initialization:: *)
RACGroup[A_]:=Table[Table[If[i==j,1,If[A[[i]][[j]]==1,2,Infinity]],{i,1,Length[A]}],{j,1,Length[A]}]/;MatrixQ[A]&&SubsetQ[{0,1},Flatten[A]]&&SymmetricMatrixQ[A]


End[];


Protect[
(*Coxeter matrix and Coxeter form*)
ValidCoxeterMatrixQ,BilinearForm, FormSignature,
(*Diagrams*)
CoxeterAdjacencyMatrix,CoxeterDiagram,PresentationAdjacencyMatrix,PresentationDiagram,
(*Generators and word manipulations*)
Generators,GeneratorQ,GeneratorIndex,GeneratorSort,CoxeterWordRewrite,DisplayGenerator,DisplayWord,WordLength,WordInverse,WordTake,WordDrop,WordSymbols,WordPalindromeQ,CentralGenerator,ConjugatingElement,
(*Special Subgroups*)
IrreducibleFactor,IrreducibleCGQ,SpecialSubgroup,ConvertToSpecialSubgroup,ConvertFromSpecialSubgroup,IrreducibleFactors,IrreducibleSpecialSubgroups,SpecialSubgroups,SphericalSubgroups,
(*Types of Coxeter system*)
EuclideanCGQ, SphericalCGQ,HyperbolicCGQ,EvenCGQ,RACGQ,
(*Coxeter system data*)
GroupSize,MaxLength,CoxeterNumber,DavisComplexDimension,
(*Group elements*)
Braid,CoxeterElement,LongestElement,
(*Examples of Coxeter matrices*)
TypeA,TypeB,TypeC,TypeD,E6,E7,E8,F4,G2,H3,H4,I2,TypeAE,TypeAE,TypeAE,TypeAE,EE6,EE7,EE8,FE4,GE2,TriangleCG,FreeCG,RAPolygonG,RABipartiteG,RACGroup
];


EndPackage[];



